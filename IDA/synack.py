#Lucca Zenobio - @themrzmaster
#This script deobfuscate SynAck malware and reveal the APIs called and calculate some other internal functions calls
#the code is ugly, but i tried to use the minium from ida apis (idk why)
#Need to have a sqlite3 db populated with windows apis and crc32.
#i have a script for extraction my github

import sqlite3
import idautils

cont_dif = 0
adress1 = 0
adress2 = 0
call_adress = 0
op = ''

xor1 = 0
xor2 = 0
xor_result = 0
head_master = 0
api_index = {}

cur_reg = ''
adress3 = 0
adress4 = 0
ctr = 0
#path to sqlite3 db, containing 'exports' table
conn = sqlite3.connect('C:\\api-hash.db')
cursor = conn.cursor()

def extract_number(x):
    v2 = 0
    v2 = x.replace("cs:", "")
    v2 = v2.replace("h", "")
    return v2

def remove_notation(x):
    v2 = 0
    v2 = x.replace("h", "")
    return v2
def get_next_head(head):
    head = idc.NextHead(head)
    inst = (idc.GetDisasm(head)).split(' ')
    return inst      

#Find code where API are obfuscated like:
#lea     rax, cs:0FFFFFFFFCE626DF7h
#...
#add     rax, 31DE9039h
#...
#call    rax
#Calculate adress and comment it

def detect1(head):
    global ctr
    global adress1
    global adress2
    global cont_dif
    global cur_reg
    global op
    cont = 15 
    inst = (idc.GetDisasm(head)).split(' ')
    c1 = inst[0]
    if c1 == 'lea':
        try:
            p1 = inst[5]
            p2 = inst[6]
            if 'cs' in p2:
                cur_reg = p1
                cont_dif = 0
                adress1 = extract_number(p2)
                ctr = 1
        except IndexError as e:
            pass               
    if 'add' in c1 or 'sub' in c1:
        try:
            p1 = inst[5]
            p2 = inst[6]
            if p1 in cur_reg and ctr == 1:
                if cont_dif <= cont:
                    op = c1
                    adress2 = extract_number(p2)
                    cont_dif = 0
                    ctr = 2
        except IndexError as e:
            pass
    if 'call' in c1:
        try:
            p1 = inst[4]
            if p1 in cur_reg and cont_dif <= cont and ctr == 2:
                ctr = 0
                #sum
                basehexin = int(adress1, 16)
                sechexin = int(adress2, 16)
                if 'add' in op:
                    res = int((basehexin + sechexin) - 0x10000000000000000)
                    MakeComm(head, hex(res))
                elif 'sub' in op:
                    res = basehexin - sechexin
                    MakeComm(head, hex(res))
        except IndexError as e:
            pass

#find pattern
#push    rcx
#push    rdx
#push    r8
#push    r9
#push    0FFFFFFFF965B5A33h
#push    1C8D2DA8h
#..
#jmp ..
#calculate xor of hex values pushed
#xor = crc32 of api name
#match crc in database
#return and comment api name

def detect2(head):
    global xor1
    global xor2
    try:
        inst = (idc.GetDisasm(head)).split(' ')
        c1 = inst[0]
        c2 = inst[4]
        if 'push' in c1 and 'rcx' in c2:
            head_master = head
            head = idc.NextHead(head)
            inst = (idc.GetDisasm(head)).split(' ')
            c1 = inst[0]
            c2 = inst[4]  
            if 'push' in c1 and 'rdx' in c2:
                head = idc.NextHead(head)
                inst = (idc.GetDisasm(head)).split(' ')
                c1 = inst[0]
                c2 = inst[4] 
                if 'push' in c1 and 'r8' in c2:
                    head = idc.NextHead(head)
                    inst = (idc.GetDisasm(head)).split(' ')
                    c1 = inst[0]
                    c2 = inst[4]
                    if 'push' in c1 and 'r9' in c2:
                        head = idc.NextHead(head)
                        inst = (idc.GetDisasm(head)).split(' ')
                        c1 = inst[0]
                        c2 = inst[4]
                        if 'push' in c1 and 'h' in c2:
                            xor1 = remove_notation(c2)
                            head = idc.NextHead(head)
                            inst = (idc.GetDisasm(head)).split(' ')
                            c1 = inst[0]
                            c2 = inst[4]
                            if 'push' in c1 and 'h' in c2:
                                xor2 = remove_notation(c2)
                                head = idc.NextHead(head)
                                inst = (idc.GetDisasm(head)).split(' ')
                                c1 = inst[0]
                                while('retn' not in c1 and 'jmp' not in c1):
                                    head = idc.NextHead(head)
                                    inst = (idc.GetDisasm(head)).split(' ')
                                    c1 = inst[0]
                                xor_result = int(xor1, 16) ^ int(xor2, 16)
                                if len(hex(xor_result)) > 15:
                                    res = int(xor_result - 0xffffffff00000000)
                                else:
                                    res = int(xor_result)
                                crc = hex(res).rstrip("L")
                                name = ""
                                cursor.execute("""
                                SELECT * FROM exports WHERE crc32 LIKE ?
                                """, ('%'+crc+'%',))
                                for linha in cursor.fetchall():
                                    name = (linha[1])
                                    api_index[hex(head_master)] = str(name)     
                                #print(str(hex(head)) + " - " +str(hex(res) + " " + str(name)))
                                MakeComm(head, str(hex(res) + " " + str(name)))                 
    except IndexError as e:
        pass
                                       

#Find code where API are obfuscated like:
#mov     rax, cs:off_402323
#...
#add     rax, 154E18h
#...
#call    rax
#Calculate adress and comment it, search on index_api extracted by detect2()

def detect3(head):
    global ctr
    global adress3
    global adress4
    global cont_dif
    global op
    global cur_reg
    cont = 15
    inst = (idc.GetDisasm(head)).split(' ')
    c1 = inst[0]
    if c1 == 'mov':
        try:
            p1 = inst[5]
            p2 = inst[6]
            if 'cs:off' in p2:
                ctr = 1
                cur_reg = p1 
                n = p2.replace("cs:off_" , "")
                y = int(n, 16)
                x = idaapi.get_many_bytes(y, 4).encode("hex")
                adress3 = (struct.pack("<L", int(x, base=16))).encode("hex")
                cont_dif = 0
                
        except IndexError as e:
            pass               
    if 'add' in c1 or 'sub' in c1:
        try:
            p1 = inst[5]
            p2 = inst[6]
            if p1 in cur_reg:
                if cont_dif <= cont and ctr == 1:
                    op = c1
                    ctr = 2
                    adress4 = extract_number(p2)
                    cont_dif = 0
                    
        except IndexError as e:
            pass
    if 'call' in c1:
        try:
            p1 = inst[4]
            if p1 in cur_reg and cont_dif <= cont and ctr == 2:
                #sum
                ctr = 0
                if len(adress4) == 6:
                    s = str(adress3)
                    adress3 = s[2:]
                basehexin = int(adress3, 16)
                sechexin = int(adress4, 16)
                if 'add' in op:
                    res = basehexin + sechexin 
                elif 'sub' in op:
                    res = basehexin - sechexin
                
                if len(hex(res)) > 16:
                    res = int(res - 0x10000000000000000) 
        
                try:
                    api_name = api_index[str(hex(res) + "L")]
                    MakeComm(head, str(hex(res)) + " - " + api_name)
                except KeyError as e:
                    MakeComm(head, str(hex(res)))

        except IndexError as e:
            pass

def execute_stuff(detect):
    global cont_dif
    for sgm in idautils.Segments():
        for head in idautils.Heads(sgm, SegEnd(sgm)):
            if idaapi.isCode(GetFlags(head)):
                cmd = idc.GetDisasm(head)
                inst = cmd.split(' ')
                cont_dif += 1
                detect(head)

print("Stage 1..")
execute_stuff(detect1)
print("Stage 2..")
execute_stuff(detect2)
print("Stage 3..")
execute_stuff(detect3)
print("Done!")
print("API Index")
for key, value in api_index.iteritems():
    print(key + " - " + str(value))
conn.close()     
